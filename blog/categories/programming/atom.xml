<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Ruixiang Du]]></title>
  <link href="http://rxdu.me/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://rxdu.me/"/>
  <updated>2014-04-24T00:44:29-04:00</updated>
  <id>http://rxdu.me/</id>
  <author>
    <name><![CDATA[Ruixiang Du]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using QT in ROS Catkin Packages]]></title>
    <link href="http://rxdu.me/blog/2014/03/25/using-qt-in-ros-catkin-packages/"/>
    <updated>2014-03-25T18:14:35-04:00</updated>
    <id>http://rxdu.me/blog/2014/03/25/using-qt-in-ros-catkin-packages</id>
    <content type="html"><![CDATA[<p>Rviz plugins are basically QT widgets. CMakeLists.txt of the ROS package using QT needs to be modified accordingly for the compilation. ROS wiki provides several tutorials/examples about how to write a plugin for Rviz and how to configure the package. However, these materials are mainly for rosbuild. This article introduces how to use QT in ROS catkin packages, in other words, how to use QT for a package of ROS Groovy/Hydro or later. This article shows how to write the CMakeLists.txt for a package, which uses librviz for visualization.</p>

<!-- more -->


<p>The example package includes the following files:</p>

<p><code>
++ rviz_gui_package
 ++ src
   +- rviz_gui.cpp
   +- rviz_gui.h
   +- rviz_gui.ui
   +- main.cpp
 +- CMakeLists.txt
 +- package.xml
</code></p>

<p>To compile a QT executable widget, you need to add the following to your CMakeLists.txt:</p>

<p>```
find_package(Qt4 COMPONENTS QtCore QtGui REQUIRED)</p>

<p>include(${QT_USE_FILE})
add_definitions(-DQT_NO_KEYWORDS)
add_definitions(${QT_DEFINITIONS})</p>

<p>set(HEADER_FILES
  src/rviz_gui.h
  include/myviz.h
)</p>

<p>set(SOURCE_FILES
  src/rviz_gui.cpp
  src/main.cpp
  ${MOC_FILES}
)</p>

<p>set(FORM_FILES
  src/rviz_gui.ui
)</p>

<p>QT4_WRAP_CPP(MOC_SRC_H
  ${HEADER_FILES}
)</p>

<p>QT4_WRAP_UI(MOC_GUI_H
  ${FORM_FILES}
)</p>

<p>include_directories(${CMAKE_CURRENT_BINARY_DIR})</p>

<p>add_executable(rviz_gui ${SOURCE_FILES} ${MOC_SRC_H} ${MOC_GUI_H})
target_link_libraries(rviz_gui ${QT_LIBRARIES} ${catkin_LIBRARIES})
```</p>

<p>To understand why you should do this, you need to understand the QT build system. For detailed illustration, read this <a href="http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects">Document</a> from qt-project.org. <strong>The image shown below is also from this document</strong>. I include it here just for convinence of reference.</p>

<p><img src="/images/posts/qt-build-system.png" width="600"></p>

<p>The basic idea of the above code snippet,</p>

<ul>
<li>Line 1-4 set up the environment.</li>
<li>Line 7-20 tells the build system the source/header/form files for the qt application.</li>
<li>Line 22-24 correspond to &ldquo;generated moc_*.cpp&rdquo; block in the above image.</li>
<li>Line 26-28 correspond to &ldquo;generated ui_*.h&rdquo; block in the above image.</li>
<li>No resource file is used in this example, so &ldquo;Resource files&rdquo; and &ldquo;generated qrc_*.cpp&rdquo; blocks are not used.</li>
<li>Line 30, according to <a href="http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects">Document</a>, &ldquo;As all intermediate files are generated outside the source tree, the header file generated by uic will not be located by the compiler. In order to handle this, the build directory needs to be added to the list of include directories.&rdquo;</li>
<li>Line 32-33 compile and link executables based on all user files and Qt intermediate files.</li>
</ul>


<p>The complete copy of <a href="https://github.com/rxdu/FallRiskProjectROS/blob/hydro_devel/fallrisk_gui/fallrisk_rviz_gui/CMakeLists.txt"><strong>CMakeLists.txt</strong></a> (modified from the original file generated by command catkin_create_pkg)</p>

<h5>Reference:</h5>

<ol>
<li><a href="http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects">Using CMake to Build Qt Projects</a></li>
<li><a href="http://www.briangoldfain.com/2013/02/using-qt-in-a-ros-catkin-package/">Using QT in a ROS Catkin Package</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Eclipse for CMAKE Projects]]></title>
    <link href="http://rxdu.me/blog/2014/02/23/how-to-use-eclipse-for-cmake-projects/"/>
    <updated>2014-02-23T22:50:31-05:00</updated>
    <id>http://rxdu.me/blog/2014/02/23/how-to-use-eclipse-for-cmake-projects</id>
    <content type="html"><![CDATA[<p>Reference:</p>

<p><a href="http://www.vtk.org/Wiki/CMake%3aEclipse_UNIX_Tutorial">http://www.vtk.org/Wiki/CMake%3aEclipse_UNIX_Tutorial</a>
<a href="http://www.vtk.org/Wiki/Eclipse_CDT4_Generator">http://www.vtk.org/Wiki/Eclipse_CDT4_Generator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tutorial of CMAKE]]></title>
    <link href="http://rxdu.me/blog/2014/02/20/a-tutorial-of-cmake/"/>
    <updated>2014-02-20T13:37:41-05:00</updated>
    <id>http://rxdu.me/blog/2014/02/20/a-tutorial-of-cmake</id>
    <content type="html"><![CDATA[<p>CMAKE is widely used in many open-source projects. It&rsquo;s also necessary to lean about it for your own projects.</p>

<p><a href="http://mirkokiefer.com/blog/2013/03/cmake-by-example/">CMake by Example</a> is a good tutorial to get started. Just a record for future reference.</p>
]]></content>
  </entry>
  
</feed>
