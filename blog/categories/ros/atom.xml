<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ROS | Ruixiang Du]]></title>
  <link href="http://rdu.im/blog/categories/ros/atom.xml" rel="self"/>
  <link href="http://rdu.im/"/>
  <updated>2015-01-16T22:13:35-05:00</updated>
  <id>http://rdu.im/</id>
  <author>
    <name><![CDATA[Ruixiang Du]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using QT in ROS Catkin Packages]]></title>
    <link href="http://rdu.im/blog/2014/03/25/using-qt-in-ros-catkin-packages/"/>
    <updated>2014-03-25T18:14:35-04:00</updated>
    <id>http://rdu.im/blog/2014/03/25/using-qt-in-ros-catkin-packages</id>
    <content type="html"><![CDATA[<p>Rviz plugins are basically QT widgets. CMakeLists.txt of the ROS package using QT needs to be modified accordingly for the compilation. ROS wiki provides several tutorials/examples about how to write a plugin for Rviz and how to configure the package. However, these materials are mainly for rosbuild. This article introduces how to use QT in ROS catkin packages, in other words, how to use QT for a package of ROS Groovy/Hydro or later. This article shows how to write the CMakeLists.txt for a package, which uses librviz for visualization.</p>

<!-- more -->


<p>The example package includes the following files:</p>

<p><code>
++ rviz_gui_package
 ++ src
   +- rviz_gui.cpp
   +- rviz_gui.h
   +- rviz_gui.ui
   +- main.cpp
 +- CMakeLists.txt
 +- package.xml
</code></p>

<p>To compile a QT executable widget, you need to add the following to your CMakeLists.txt:</p>

<p>```
find_package(Qt4 COMPONENTS QtCore QtGui REQUIRED)</p>

<p>include(${QT_USE_FILE})
add_definitions(-DQT_NO_KEYWORDS)
add_definitions(${QT_DEFINITIONS})</p>

<p>set(HEADER_FILES
  src/rviz_gui.h
  include/myviz.h
)</p>

<p>set(SOURCE_FILES
  src/rviz_gui.cpp
  src/main.cpp
  ${MOC_FILES}
)</p>

<p>set(FORM_FILES
  src/rviz_gui.ui
)</p>

<p>QT4_WRAP_CPP(MOC_SRC_H
  ${HEADER_FILES}
)</p>

<p>QT4_WRAP_UI(MOC_GUI_H
  ${FORM_FILES}
)</p>

<p>include_directories(${CMAKE_CURRENT_BINARY_DIR})</p>

<p>add_executable(rviz_gui ${SOURCE_FILES} ${MOC_SRC_H} ${MOC_GUI_H})
target_link_libraries(rviz_gui ${QT_LIBRARIES} ${catkin_LIBRARIES})
```</p>

<p>To understand why you should do this, you need to understand the QT build system. For detailed illustration, read this <a href="http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects">Document</a> from qt-project.org. <strong>The image shown below is also from this document</strong>. I include it here just for convinence of reference.</p>

<p><img src="/images/posts/qt-build-system.png" width="600"></p>

<p>The basic idea of the above code snippet,</p>

<ul>
<li>Line 1-4 set up the environment.</li>
<li>Line 7-20 tells the build system the source/header/form files for the qt application.</li>
<li>Line 22-24 correspond to &ldquo;generated moc_*.cpp&rdquo; block in the above image.</li>
<li>Line 26-28 correspond to &ldquo;generated ui_*.h&rdquo; block in the above image.</li>
<li>No resource file is used in this example, so &ldquo;Resource files&rdquo; and &ldquo;generated qrc_*.cpp&rdquo; blocks are not used.</li>
<li>Line 30, according to <a href="http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects">Document</a>, &ldquo;As all intermediate files are generated outside the source tree, the header file generated by uic will not be located by the compiler. In order to handle this, the build directory needs to be added to the list of include directories.&rdquo;</li>
<li>Line 32-33 compile and link executables based on all user files and Qt intermediate files.</li>
</ul>


<p>The complete copy of <a href="https://github.com/rxdu/FallRiskProjectROS/blob/hydro_devel/fallrisk_gui/fallrisk_rviz_gui/CMakeLists.txt"><strong>CMakeLists.txt</strong></a> (modified from the original file generated by command catkin_create_pkg)</p>

<h5>Reference:</h5>

<ol>
<li><a href="http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects">Using CMake to Build Qt Projects</a></li>
<li><a href="http://www.briangoldfain.com/2013/02/using-qt-in-a-ros-catkin-package/">Using QT in a ROS Catkin Package</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Upgrade for Turtlebot]]></title>
    <link href="http://rdu.im/blog/2014/01/21/software-upgrade-for-turtlebot/"/>
    <updated>2014-01-21T21:52:23-05:00</updated>
    <id>http://rdu.im/blog/2014/01/21/software-upgrade-for-turtlebot</id>
    <content type="html"><![CDATA[<p>This article briefly illustrates how to upgrade the software of turtlebot to Ubuntu 12.04 &amp; ROS Groovy from earlier versions. Several issues that may occur during the upgrade are stated as the supplement of official tutorials from ROS wiki.</p>

<!-- more -->


<p>The ROS wiki page <a href="http://wiki.ros.org/Robots/TurtleBot/Robot%20Setup">Robots/TurtleBot/Robot Setup</a> is a good reference but it is not always up to date. It uses the system image provided by willow garage, which has integrated most packages required to run turtlebot. What you mainly need to do are just installing Ubuntu with the modified image and then making some small updates. But it&rsquo;s not easy to find sufficient information about that image to make sure it&rsquo;s exactly what you want and it&rsquo;s fully compatible with your netbook. So this tutorial presents how to install the necessary components separately.</p>

<p>==Install Ubuntu==</p>

<p>You can download the iso image of Ubuntu 12.04 from its <a href="http://www.ubuntu.com/download">official website</a>. Then burn the image to a flash drive or CD to make a bootable media. The installation steps are very straightforward and you mainly need to make some easy choices and click &ldquo;next&rdquo;. If necessary, you can have a look at this page <a href="http://www.ubuntu.com/download/desktop/install-desktop-long-term-support">Install Ubuntu 12.04.2 LTS</a>.</p>

<p>==Configure Wireless Network of the Netbook==</p>

<p>Now you have a netbook running Ubuntu. To complete the following steps, you need to make the netbook to have access to the Internet. To connect to WPI network (either wireless or wired), you need to get your computer registered and install required certificate files. Definitely it&rsquo;s more convenient to use the wireless network since the robot needs to move around. You can follow this WPI web page to complete the configuration: <a href="http://www.wpi.edu/Academics/CCC/Netops/Wireless/Setup/Linux.html.">http://www.wpi.edu/Academics/CCC/Netops/Wireless/Setup/Linux.html.</a></p>

<p>==Install ROS==</p>

<p>Follow this wiki page <a href="http://www.ros.org/wiki/groovy/Installation/Ubuntu">groovy/Installation/Ubuntu</a> to finish the installation of ROS groovy. It should be easy to find the latest installation instruction if the link for the old one is invalid.</p>

<p>==Install Turtlebot Packages==</p>

<p>This <a href="http://ros.org/wiki/Robots/TurtleBot">Robots/Turtlebot</a> page provides well written documents of ROS packages for turtlebot. First follow <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Installation">Installation</a> step by step. The easiest way should be &ldquo;Install from Debs&rdquo;. On the <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Post-Installation%20Setup">Post-Installation Setup</a> page, you first need to install chrony for clock synchronization. Don&rsquo;t forget to check the section &lsquo;&rsquo;&lsquo;Special Cases&rsquo;&lsquo;&rsquo;. Probably you need to take care of <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Create%20Base">Create Base</a> and <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Netbook%20Battery%20Setup">Netbook Battery Setup</a>. Be careful that the Netbook Battery Setup instruction is not up to date at the time this wiki is written. The robot cannot find battery information of the netbook from &ldquo;/proc/acpi/battery/BAT1&rdquo;. Instead, use &ldquo;/sys/class/power_supply/BAT1&rdquo; and the command changes to:
<code>
 $export TURTLEBOT_BATTERY=/proc/acpi/battery/BAT1
</code>
Follow <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Workstation%20Installation">Workstation Installation</a> and <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Network%20Configuration">Network Configuration</a> to make sure your robot can communicate with the work station successfully.</p>

<p>==More Configurations==</p>

<p>Now you can step to the next section of [<a href="http://ros.org/wiki/Robots/TurtleBot">http://ros.org/wiki/Robots/TurtleBot</a> Robots/Turtlebot]. Work is still not done. When following the <a href="http://ros.org/wiki/turtlebot_bringup/Tutorials/groovy/TurtleBot%20Bringup">turtlebot_bringup/Tutorials/groovy/TurtleBot Bringup</a>, probably you will get errors when you try to execute roslaunch command:
<code>
$roslaunch turtlebot_bringup minimal.launch
</code>
If you get a error message like this:
<code>
...
Failed to open port /dev/ttyUSB0.  Please make sure the Create cable is plugged into the computer.
...
</code>
It&rsquo;s because you don&rsquo;t have the necessary access permission to the ttyUSB0 device. The solution is to add the user account you&rsquo;re using to the &ldquo;dialout&rdquo; group.
<code>
 $sudo adduser second_user dialout
</code>
Now you should be able to successfully roslaunch the above launch file. After starting minimal.launch and then turtlebot_dashboard.launch, you should get information of the robot from the dashboard.</p>

<p>==Conclusion==</p>

<p>If you have managed to get through all steps stated above, you&rsquo;re all set for the upgrade. Actually, the above instruction should still be helpful when you&rsquo;re trying to upgrade the software to a newer version in the future. Basically the ideas should stay the same. Just make sure you have the right combination of Ubuntu version and ROS version. You also need to check all relevant packages for the turtlebot and your project have got support to the version of ROS you&rsquo;re trying to use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix 'libgazebo_common.so.1 Not Found' Error on Ubuntu 12.04]]></title>
    <link href="http://rdu.im/blog/2014/01/21/how-to-fix-libgazebo-common-dot-so-dot-1-not-found-error-on-ubuntu-12-dot-04/"/>
    <updated>2014-01-21T21:36:56-05:00</updated>
    <id>http://rdu.im/blog/2014/01/21/how-to-fix-libgazebo-common-dot-so-dot-1-not-found-error-on-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p>Reference:<a href="http://webcache.googleusercontent.com/search?q=cache:BPYPhX2gWWsJ:answers.gazebosim.org/question/2338/on-ubuntu-1204-libgazebo_commonso1-not-found/+&amp;cd=2&amp;hl=en&amp;ct=clnk&amp;gl=us">Gazebo Answers</a></p>

<p>With ROS Groovy installed on Ubuntu 12.04, I was trying to install Gazebo simulator. I followed instructions on this page: <a href="http://gazebosim.org/wiki/1.6/install#Compile_Instructions.">http://gazebosim.org/wiki/1.6/install#Compile_Instructions.</a> Following Compile Instructions, gazebo was installed in the default directory, but step 11 gave the error:
<code>
$ gazebo
gazebo: error while loading shared libraries: libgazebo_common.so.1: cannot open shared object file: No such file or directory
</code></p>

<!-- more -->


<p>From the Gazebo Answers website, I found the solution to this problem provided by <em>gerkey</em>. It seemed the original link for this ask-and-answer post was broken and only a cached paged by google could be visited. Since this post solved my problem, I copy it here for future reference:</p>

<hr />

<p>Answer:</p>

<p>tl;dr:
<code>
sudo bash -c "echo /usr/local/lib &gt;&gt; /etc/ld.so.conf"
sudo ldconfig
</code>
First, let&rsquo;s understand the situation:
<code>
ldd `which gazebo` | grep "not found"
</code>
That will give you a list of the libraries that the executable needs, but that the loader can&rsquo;t find. Probably libgazebo_common.so will be in that list, likely along with many other lib_gazebo* libraries.</p>

<p>If you did a default install, it went into /usr/local. By default, your system loader might be configured not to look in /usr/local/lib. To test that, add that directory to your LD_LIBRARY_PATH:
<code>
LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH ldd `which gazebo` | grep "not found"
</code>
If that gives you an empty list, then you&rsquo;re ready to go, in which case you run gazebo like so:
<code>
LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH gazebo
</code>
or:
<code>
export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
gazebo
</code>
But it&rsquo;s better not to have to remember that. So you can configure your system to look in /usr/local/lib for libraries:
<code>
sudo bash -c "echo /usr/local/lib &gt;&gt; /etc/ld.so.conf"
sudo ldconfig
</code>
That should work for gazebo and for anything else that you install to /usr/local.</p>
]]></content>
  </entry>
  
</feed>
