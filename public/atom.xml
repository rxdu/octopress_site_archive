<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruixiang Du]]></title>
  <link href="http://rdu.im/atom.xml" rel="self"/>
  <link href="http://rdu.im/"/>
  <updated>2014-12-21T14:44:47-05:00</updated>
  <id>http://rdu.im/</id>
  <author>
    <name><![CDATA[Ruixiang Du]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using QT in ROS Catkin Packages]]></title>
    <link href="http://rdu.im/blog/2014/03/25/using-qt-in-ros-catkin-packages/"/>
    <updated>2014-03-25T18:14:35-04:00</updated>
    <id>http://rdu.im/blog/2014/03/25/using-qt-in-ros-catkin-packages</id>
    <content type="html"><![CDATA[<p>Rviz plugins are basically QT widgets. CMakeLists.txt of the ROS package using QT needs to be modified accordingly for the compilation. ROS wiki provides several tutorials/examples about how to write a plugin for Rviz and how to configure the package. However, these materials are mainly for rosbuild. This article introduces how to use QT in ROS catkin packages, in other words, how to use QT for a package of ROS Groovy/Hydro or later. This article shows how to write the CMakeLists.txt for a package, which uses librviz for visualization.</p>

<!-- more -->


<p>The example package includes the following files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>++ rviz_gui_package
</span><span class='line'> ++ src
</span><span class='line'>   +- rviz_gui.cpp
</span><span class='line'>   +- rviz_gui.h
</span><span class='line'>   +- rviz_gui.ui
</span><span class='line'>   +- main.cpp
</span><span class='line'> +- CMakeLists.txt
</span><span class='line'> +- package.xml</span></code></pre></td></tr></table></div></figure>


<p>To compile a QT executable widget, you need to add the following to your CMakeLists.txt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find_package(Qt4 COMPONENTS QtCore QtGui REQUIRED)
</span><span class='line'>
</span><span class='line'>include(${QT_USE_FILE})
</span><span class='line'>add_definitions(-DQT_NO_KEYWORDS)
</span><span class='line'>add_definitions(${QT_DEFINITIONS})
</span><span class='line'>
</span><span class='line'>set(HEADER_FILES 
</span><span class='line'>  src/rviz_gui.h
</span><span class='line'>  include/myviz.h
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>set(SOURCE_FILES
</span><span class='line'>  src/rviz_gui.cpp
</span><span class='line'>  src/main.cpp
</span><span class='line'>  ${MOC_FILES}
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>set(FORM_FILES 
</span><span class='line'>  src/rviz_gui.ui
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>QT4_WRAP_CPP(MOC_SRC_H
</span><span class='line'>  ${HEADER_FILES}
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>QT4_WRAP_UI(MOC_GUI_H 
</span><span class='line'>  ${FORM_FILES}
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>include_directories(${CMAKE_CURRENT_BINARY_DIR})
</span><span class='line'>
</span><span class='line'>add_executable(rviz_gui ${SOURCE_FILES} ${MOC_SRC_H} ${MOC_GUI_H})
</span><span class='line'>target_link_libraries(rviz_gui ${QT_LIBRARIES} ${catkin_LIBRARIES})</span></code></pre></td></tr></table></div></figure>


<p>To understand why you should do this, you need to understand the QT build system. For detailed illustration, read this <a href="http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects">Document</a> from qt-project.org. <strong>The image shown below is also from this document</strong>. I include it here just for convinence of reference.</p>

<p><img src="http://rdu.im/images/posts/qt-build-system.png" width="600"></p>

<p>The basic idea of the above code snippet,</p>

<ul>
<li>Line 1-4 set up the environment.</li>
<li>Line 7-20 tells the build system the source/header/form files for the qt application.</li>
<li>Line 22-24 correspond to &ldquo;generated moc_*.cpp&rdquo; block in the above image.</li>
<li>Line 26-28 correspond to &ldquo;generated ui_*.h&rdquo; block in the above image.</li>
<li>No resource file is used in this example, so &ldquo;Resource files&rdquo; and &ldquo;generated qrc_*.cpp&rdquo; blocks are not used.</li>
<li>Line 30, according to <a href="http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects">Document</a>, &ldquo;As all intermediate files are generated outside the source tree, the header file generated by uic will not be located by the compiler. In order to handle this, the build directory needs to be added to the list of include directories.&rdquo;</li>
<li>Line 32-33 compile and link executables based on all user files and Qt intermediate files.</li>
</ul>


<p>The complete copy of <a href="https://github.com/rxdu/FallRiskProjectROS/blob/hydro_devel/fallrisk_gui/fallrisk_rviz_gui/CMakeLists.txt"><strong>CMakeLists.txt</strong></a> (modified from the original file generated by command catkin_create_pkg)</p>

<h5>Reference:</h5>

<ol>
<li><a href="http://qt-project.org/quarterly/view/using_cmake_to_build_qt_projects">Using CMake to Build Qt Projects</a></li>
<li><a href="http://www.briangoldfain.com/2013/02/using-qt-in-a-ros-catkin-package/">Using QT in a ROS Catkin Package</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Java Plugin for Web Browers on Ubuntu]]></title>
    <link href="http://rdu.im/blog/2014/03/24/install-java-plugin-for-web-browers-on-ubuntu/"/>
    <updated>2014-03-24T22:39:20-04:00</updated>
    <id>http://rdu.im/blog/2014/03/24/install-java-plugin-for-web-browers-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Java plugin is required to download certificates for WPI wireless. It&rsquo;s often required for other applications. Here is a summary of how to do this on Ubuntu.</p>

<p>1.Install Java Runtime Environment 64bit</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:webupd8team/java
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install oracle-java7-installer</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>2.Enable Java Plugin for Chrome 64bit</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir /opt/google/chrome/plugins
</span><span class='line'>cd /opt/google/chrome/plugins
</span><span class='line'>sudo ln -s /usr/lib/jvm/java-7-oracle/jre/lib/amd64/libnpjp2.so</span></code></pre></td></tr></table></div></figure>


<p>3.Enable Java Plugin for Mozilla Firefox 64bit</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /usr/lib/mozilla/plugins
</span><span class='line'>sudo mkdir /usr/lib/mozilla/plugins
</span><span class='line'>sudo ln -s /usr/lib/jvm/java-7-oracle/jre/lib/amd64/libnpjp2.so</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>:</p>

<p>If you don&rsquo;t want to install JRE in the way mentioned above, make sure you give the right path for the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ln -s /&lt;right-path-of-libnpjp2-so&gt;/libnpjp2.so</span></code></pre></td></tr></table></div></figure>


<p>Reference:
<a href="http://m.wikihow.com/Enable-Oracle-Java-in-Your-Web-Browsers-on-Ubuntu-Linux">How to Enable Oracle Java in Your Web Browsers on Ubuntu Linux</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Two Custom Domains for Github Pages]]></title>
    <link href="http://rdu.im/blog/2014/03/02/setting-up-two-custom-domains-for-github-pages/"/>
    <updated>2014-03-02T20:20:01-05:00</updated>
    <id>http://rdu.im/blog/2014/03/02/setting-up-two-custom-domains-for-github-pages</id>
    <content type="html"><![CDATA[<p>According to <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">offical tutorial</a>, &ldquo;You can only have one custom domain for any given set of Pages. If you want multiple domains to point to the same Pages, you will need to use a service that can redirect the other domains to your Pages domain.&rdquo;</p>

<p>This post gives an example about how to do the redirection with two domain names from <a href="https://www.namecheap.com/">namecheap</a> and <a href="https://www.name.com/">name.com</a> respectively.</p>

<!-- more -->


<p>My personal feeling is that namecheap provides better user experience in managing your domains. You can get what you want very easily and their <a href="https://www.namecheap.com/support/knowledgebase/article/settingup_hostrecords">help page</a> is indeed very helpful and can save you some time searching on the Internet. Name.com also has a nice-looking management interface, but it seems they don&rsquo;t provide as many functionalities as namecheap does. I can get the redirection working without any pain but I failed to do the same thing on name.com. (I&rsquo;m not a person who is familiar with web development nor network. If you are one, maybe you could ignore this comment.)</p>

<p>In this example, I use domainA(&ldquo;rdu.im&rdquo; from name.com) as the main method to access my github pages and use domainB(&ldquo;rxdu.me&rdquo; from namecheap) to do the redirection.</p>

<ol>
<li><p>Add a CNAME file, which includes your primary domain name, to your github page repository</p></li>
<li><p>On namecheap:
From the &ldquo;Host Management&rdquo; section on the left side, go to &ldquo;All Host Records&rdquo;. Add just one record:</p></li>
</ol>


<p>HOST NAME: @; IP ADDRESS/URL:<a href="http://rxdu.github.io;">http://rxdu.github.io;</a> RECORD TYPE:redirect; TTL:1800</p>

<p><img src="http://rdu.im/images/posts/namecheap_config.png" width="850"></p>

<ol>
<li>On name.com:
Go to DNS Record and add two records:</li>
</ol>


<p>Type:A; Host:rdu.im; Answer:192.30.252.153; TTL:1800</p>

<p>Type:A; Host:rdu.im; Answer:192.30.252.154; TTL:1800</p>

<p><img src="http://rdu.im/images/posts/namecom_config.png" width="850"></p>

<p>After finishing the above 3 three steps, you should be all set. Wait for some time and check if both of the domains work properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Eclipse for CMAKE Projects]]></title>
    <link href="http://rdu.im/blog/2014/02/23/how-to-use-eclipse-for-cmake-projects/"/>
    <updated>2014-02-23T22:50:31-05:00</updated>
    <id>http://rdu.im/blog/2014/02/23/how-to-use-eclipse-for-cmake-projects</id>
    <content type="html"><![CDATA[<p>Reference:</p>

<p><a href="http://www.vtk.org/Wiki/CMake%3aEclipse_UNIX_Tutorial">http://www.vtk.org/Wiki/CMake%3aEclipse_UNIX_Tutorial</a>
<a href="http://www.vtk.org/Wiki/Eclipse_CDT4_Generator">http://www.vtk.org/Wiki/Eclipse_CDT4_Generator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tutorial of CMAKE]]></title>
    <link href="http://rdu.im/blog/2014/02/20/a-tutorial-of-cmake/"/>
    <updated>2014-02-20T13:37:41-05:00</updated>
    <id>http://rdu.im/blog/2014/02/20/a-tutorial-of-cmake</id>
    <content type="html"><![CDATA[<p>CMAKE is widely used in many open-source projects. It&rsquo;s also necessary to lean about it for your own projects.</p>

<p><a href="http://mirkokiefer.com/blog/2013/03/cmake-by-example/">CMake by Example</a> is a good tutorial to get started. Just a record for future reference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use STM32 Peripheral Library With emIDE]]></title>
    <link href="http://rdu.im/blog/2014/01/21/use-stm32-peripheral-library-with-emide/"/>
    <updated>2014-01-21T22:22:27-05:00</updated>
    <id>http://rdu.im/blog/2014/01/21/use-stm32-peripheral-library-with-emide</id>
    <content type="html"><![CDATA[<p>emIDE is a open source IDE for embedded development. It integrates GCC toolchain and provides JLink support for debugging. Compared with other free, open source alternatives, it&rsquo;s much easier to start with. This blog introduces how to configure emIDE to write programs for STM32 MCU with standard peripheral library. The MCU used in this example is <em>STM32F103T8</em>. The library used is <em>STM32F10x_StdPeriph_Lib_V3.5.0</em> from ST. And the debugger probe is JLink EDU.</p>

<!-- more -->


<ol>
<li>First download STM32F10x_StdPeriph_Lib_V3.5.0 from the website of ST. Extract the archive file and you will get a folder which includes: <em>_htmresc</em>, <em>Libraries</em>, <em>Project</em> and <em>Utilities</em> folders.</li>
<li>Start emIDE and create a new project. Choose a directory to save the project and select the device you are using during the creating process. By default, you will get 3 folders in the project: <em>Doc</em>, <em>Setup</em> and <em>Src</em>. Setup folder includes a linker script and a startup code for the MCU. You can add your own code into Src folder.</li>
<li>Copy <em>Libraries</em> folder (from step 1) into the project directory. Copy <em>main.c</em>, <em>stm32fx_conf.h</em>, <em>stm32f10x_it.c</em>, <em>stm32f10x_it.h</em> from <em>Project\STM32F10x_StdPeriph_Template</em> (from step 1) to <em>Src</em> folder. Do not copy system_stm32f10x.c to Src, otherwise you will get multiple definition error during compilation. Add all files mentioned above including files in <em>Libraries</em> folder into your project in emIDE. Then remove <em>startup</em> folder (Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup)  from the project since emIDE has already provided a linker script and startup code in <em>Setup</em> folder. The structure of the project will look like the following screenshot.</li>
</ol>


<p><img src="http://rdu.im/images/posts/emide_1.png" width="400"></p>

<ol>
<li>In &ldquo;Build Options&rdquo; of the project, under Compiler <em>settings/#defines tab</em>, add two macros: STM32F10X_MD, USE_STDPERIPH_DRIVER. The first one specifies the MCU family you are using and the second one tells the compiler you will use standard library in the project.</li>
</ol>


<p><img src="http://rdu.im/images/posts/emide_2.png" width="600"></p>

<ol>
<li>Add Search directories so that the compiler can find all header files of the library.</li>
</ol>


<p><img src="http://rdu.im/images/posts/emide_3.png" width="600"></p>

<ol>
<li>In Properties of the project, make sure your JLink works under the right mode.</li>
</ol>


<p><img src="http://rdu.im/images/posts/emide_4.png" width="600"></p>

<p>Now you should be able to build the project and download the code into your target board.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Desktop of Ubuntu 12.04]]></title>
    <link href="http://rdu.im/blog/2014/01/21/remote-desktop-of-ubuntu-12-dot-04/"/>
    <updated>2014-01-21T22:19:51-05:00</updated>
    <id>http://rdu.im/blog/2014/01/21/remote-desktop-of-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p>Install xRDP package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo apt-get install xrdp</span></code></pre></td></tr></table></div></figure>


<p>If you have problem connecting to the desktop, run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$echo "gnome-session --session=ubuntu-2d" &gt; ~/.xsession
</span><span class='line'>$sudo apt-get install gnome-session-fallback</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable Guest Account in Ubuntu]]></title>
    <link href="http://rdu.im/blog/2014/01/21/disable-guest-account-in-ubuntu/"/>
    <updated>2014-01-21T22:16:55-05:00</updated>
    <id>http://rdu.im/blog/2014/01/21/disable-guest-account-in-ubuntu</id>
    <content type="html"><![CDATA[<p>Sometimes you may feel annoying to accidentally login to the guest account on you personal computer. But unlike Mac OS, you cannot disable this account directly from &ldquo;System Settings&rdquo;.</p>

<p>You can get it by following these steps:</p>

<ol>
<li>Open a terminal and enter command:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gksudo gedit /etc/lightdm/lightdm.conf</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Add one line at the end of the file:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ allow-guest=false</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Now you should see something like this in the file:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[SeatDefaults]
</span><span class='line'>greeter-session=unity-greeter
</span><span class='line'>user-session=ubuntu
</span><span class='line'>allow-guest=false</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Save and exit the file. Restart lightdm:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo restart lightdm</span></code></pre></td></tr></table></div></figure>


<p>Reference: <a href="http://www.ubuntugeek.com/ubuntu-tiphow-to-disable-guest-account-in-ubuntu-12-04precise.html">http://www.ubuntugeek.com/ubuntu-tiphow-to-disable-guest-account-in-ubuntu-12-04precise.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Eclipse in Ubuntu]]></title>
    <link href="http://rdu.im/blog/2014/01/21/install-eclipse-in-ubuntu/"/>
    <updated>2014-01-21T22:11:45-05:00</updated>
    <id>http://rdu.im/blog/2014/01/21/install-eclipse-in-ubuntu</id>
    <content type="html"><![CDATA[<p>First make sure you have installed JAVA in ubuntu to run Eclipse.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo add-apt-repository ppa:webupd8team/java
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install oracle-java7-installer</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Download the latest Eclipse from its official website.</li>
<li>Extract the files from the archive.</li>
<li>Move the extracted folder to whereever you want to put it.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mv eclipse /opt/ </span></code></pre></td></tr></table></div></figure>


<ol>
<li>Create a symlink in /usr/local/bin using</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd /usr/local/bin
</span><span class='line'>$ sudo ln -s /opt/eclipse/eclipse</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Now you should be able to run eclipse from a terminal.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Upgrade for Turtlebot]]></title>
    <link href="http://rdu.im/blog/2014/01/21/software-upgrade-for-turtlebot/"/>
    <updated>2014-01-21T21:52:23-05:00</updated>
    <id>http://rdu.im/blog/2014/01/21/software-upgrade-for-turtlebot</id>
    <content type="html"><![CDATA[<p>This article briefly illustrates how to upgrade the software of turtlebot to Ubuntu 12.04 &amp; ROS Groovy from earlier versions. Several issues that may occur during the upgrade are stated as the supplement of official tutorials from ROS wiki.</p>

<!-- more -->


<p>The ROS wiki page <a href="http://wiki.ros.org/Robots/TurtleBot/Robot%20Setup">Robots/TurtleBot/Robot Setup</a> is a good reference but it is not always up to date. It uses the system image provided by willow garage, which has integrated most packages required to run turtlebot. What you mainly need to do are just installing Ubuntu with the modified image and then making some small updates. But it&rsquo;s not easy to find sufficient information about that image to make sure it&rsquo;s exactly what you want and it&rsquo;s fully compatible with your netbook. So this tutorial presents how to install the necessary components separately.</p>

<p>==Install Ubuntu==</p>

<p>You can download the iso image of Ubuntu 12.04 from its <a href="http://www.ubuntu.com/download">official website</a>. Then burn the image to a flash drive or CD to make a bootable media. The installation steps are very straightforward and you mainly need to make some easy choices and click &ldquo;next&rdquo;. If necessary, you can have a look at this page <a href="http://www.ubuntu.com/download/desktop/install-desktop-long-term-support">Install Ubuntu 12.04.2 LTS</a>.</p>

<p>==Configure Wireless Network of the Netbook==</p>

<p>Now you have a netbook running Ubuntu. To complete the following steps, you need to make the netbook to have access to the Internet. To connect to WPI network (either wireless or wired), you need to get your computer registered and install required certificate files. Definitely it&rsquo;s more convenient to use the wireless network since the robot needs to move around. You can follow this WPI web page to complete the configuration: <a href="http://www.wpi.edu/Academics/CCC/Netops/Wireless/Setup/Linux.html.">http://www.wpi.edu/Academics/CCC/Netops/Wireless/Setup/Linux.html.</a></p>

<p>==Install ROS==</p>

<p>Follow this wiki page <a href="http://www.ros.org/wiki/groovy/Installation/Ubuntu">groovy/Installation/Ubuntu</a> to finish the installation of ROS groovy. It should be easy to find the latest installation instruction if the link for the old one is invalid.</p>

<p>==Install Turtlebot Packages==</p>

<p>This <a href="http://ros.org/wiki/Robots/TurtleBot">Robots/Turtlebot</a> page provides well written documents of ROS packages for turtlebot. First follow <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Installation">Installation</a> step by step. The easiest way should be &ldquo;Install from Debs&rdquo;. On the <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Post-Installation%20Setup">Post-Installation Setup</a> page, you first need to install chrony for clock synchronization. Don&rsquo;t forget to check the section &lsquo;&rsquo;&lsquo;Special Cases&rsquo;&lsquo;&rsquo;. Probably you need to take care of <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Create%20Base">Create Base</a> and <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Netbook%20Battery%20Setup">Netbook Battery Setup</a>. Be careful that the Netbook Battery Setup instruction is not up to date at the time this wiki is written. The robot cannot find battery information of the netbook from &ldquo;/proc/acpi/battery/BAT1&rdquo;. Instead, use &ldquo;/sys/class/power_supply/BAT1&rdquo; and the command changes to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $export TURTLEBOT_BATTERY=/proc/acpi/battery/BAT1</span></code></pre></td></tr></table></div></figure>


<p>Follow <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Workstation%20Installation">Workstation Installation</a> and <a href="http://ros.org/wiki/turtlebot/Tutorials/groovy/Network%20Configuration">Network Configuration</a> to make sure your robot can communicate with the work station successfully.</p>

<p>==More Configurations==</p>

<p>Now you can step to the next section of [<a href="http://ros.org/wiki/Robots/TurtleBot">http://ros.org/wiki/Robots/TurtleBot</a> Robots/Turtlebot]. Work is still not done. When following the <a href="http://ros.org/wiki/turtlebot_bringup/Tutorials/groovy/TurtleBot%20Bringup">turtlebot_bringup/Tutorials/groovy/TurtleBot Bringup</a>, probably you will get errors when you try to execute roslaunch command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$roslaunch turtlebot_bringup minimal.launch</span></code></pre></td></tr></table></div></figure>


<p>If you get a error message like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>Failed to open port /dev/ttyUSB0.  Please make sure the Create cable is plugged into the computer.
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s because you don&rsquo;t have the necessary access permission to the ttyUSB0 device. The solution is to add the user account you&rsquo;re using to the &ldquo;dialout&rdquo; group.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $sudo adduser second_user dialout</span></code></pre></td></tr></table></div></figure>


<p>Now you should be able to successfully roslaunch the above launch file. After starting minimal.launch and then turtlebot_dashboard.launch, you should get information of the robot from the dashboard.</p>

<p>==Conclusion==</p>

<p>If you have managed to get through all steps stated above, you&rsquo;re all set for the upgrade. Actually, the above instruction should still be helpful when you&rsquo;re trying to upgrade the software to a newer version in the future. Basically the ideas should stay the same. Just make sure you have the right combination of Ubuntu version and ROS version. You also need to check all relevant packages for the turtlebot and your project have got support to the version of ROS you&rsquo;re trying to use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix 'libgazebo_common.so.1 Not Found' Error on Ubuntu 12.04]]></title>
    <link href="http://rdu.im/blog/2014/01/21/how-to-fix-libgazebo-common-dot-so-dot-1-not-found-error-on-ubuntu-12-dot-04/"/>
    <updated>2014-01-21T21:36:56-05:00</updated>
    <id>http://rdu.im/blog/2014/01/21/how-to-fix-libgazebo-common-dot-so-dot-1-not-found-error-on-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p>Reference:<a href="http://webcache.googleusercontent.com/search?q=cache:BPYPhX2gWWsJ:answers.gazebosim.org/question/2338/on-ubuntu-1204-libgazebo_commonso1-not-found/+&amp;cd=2&amp;hl=en&amp;ct=clnk&amp;gl=us">Gazebo Answers</a></p>

<p>With ROS Groovy installed on Ubuntu 12.04, I was trying to install Gazebo simulator. I followed instructions on this page: <a href="http://gazebosim.org/wiki/1.6/install#Compile_Instructions.">http://gazebosim.org/wiki/1.6/install#Compile_Instructions.</a> Following Compile Instructions, gazebo was installed in the default directory, but step 11 gave the error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gazebo
</span><span class='line'>gazebo: error while loading shared libraries: libgazebo_common.so.1: cannot open shared object file: No such file or directory</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>From the Gazebo Answers website, I found the solution to this problem provided by <em>gerkey</em>. It seemed the original link for this ask-and-answer post was broken and only a cached paged by google could be visited. Since this post solved my problem, I copy it here for future reference:</p>

<hr />

<p>Answer:</p>

<p>tl;dr:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo bash -c "echo /usr/local/lib &gt;&gt; /etc/ld.so.conf"
</span><span class='line'>sudo ldconfig</span></code></pre></td></tr></table></div></figure>


<p>First, let&rsquo;s understand the situation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ldd `which gazebo` | grep "not found"</span></code></pre></td></tr></table></div></figure>


<p>That will give you a list of the libraries that the executable needs, but that the loader can&rsquo;t find. Probably libgazebo_common.so will be in that list, likely along with many other lib_gazebo* libraries.</p>

<p>If you did a default install, it went into /usr/local. By default, your system loader might be configured not to look in /usr/local/lib. To test that, add that directory to your LD_LIBRARY_PATH:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH ldd `which gazebo` | grep "not found"</span></code></pre></td></tr></table></div></figure>


<p>If that gives you an empty list, then you&rsquo;re ready to go, in which case you run gazebo like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH gazebo</span></code></pre></td></tr></table></div></figure>


<p>or:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
</span><span class='line'>gazebo</span></code></pre></td></tr></table></div></figure>


<p>But it&rsquo;s better not to have to remember that. So you can configure your system to look in /usr/local/lib for libraries:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo bash -c "echo /usr/local/lib &gt;&gt; /etc/ld.so.conf"
</span><span class='line'>sudo ldconfig</span></code></pre></td></tr></table></div></figure>


<p>That should work for gazebo and for anything else that you install to /usr/local.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Commands of Ubuntu]]></title>
    <link href="http://rdu.im/blog/2014/01/20/basic-commands-of-ubuntu/"/>
    <updated>2014-01-20T18:15:40-05:00</updated>
    <id>http://rdu.im/blog/2014/01/20/basic-commands-of-ubuntu</id>
    <content type="html"><![CDATA[<ol>
<li><p>Switch between GUI and virtual console:</p>

<p> Console: Ctrl+Alt+F2 ((F1), F2, F3, F4, F5, F6)</p>

<p> There are six virtual consoles. The console on F1 is used for debug and log output, so is best avoided.</p>

<p> GUI: Ctrl+Alt+F7</p>

<p> If GUI crashes, it might be possible to fix the problem in virtual consoles.</p></li>
</ol>


<!-- more -->


<ol>
<li><p>Basic file operation</p>

<ul>
<li>Get help:
<code>
command --help
</code>
Run a program: type
<code>
./programname
</code></li>
<li><p>ls: list files</p></li>
<li><p>cp: copy files and folders</p></li>
<li><p>mv: move file or folder</p></li>
<li><p>rm: remove files</p></li>
<li><p>ln: create a link to a file
<code>
ln -s myfile.doc ~/Desktop/
</code></p></li>
<li>grep: search through specified file for a word or phrase
<code>
grep -I wireless myfile.txt
</code></li>
<li><p>man: view the manual page for specified command</p></li>
<li><p>nano: simple text editor</p></li>
<li><p>umount: unmount attached storage device</p></li>
<li><p>locate: find specified file; relies on a background datebase that is periodically and automatically upated. The database can be manually updated by typing the &ldquo;sudo updatedb&rdquo; command.</p></li>
</ul>
</li>
<li><p>sudo and gksu</p>

<p> if you run a graphical application from the command-line it&rsquo;s necessary to precede it with <em>gksu</em> instead of <em>sudo</em>.</p>

<p> Temporarily switching to root: sudo su</p>

<p> Return to ordinary user account: exit or Ctrl+D</p></li>
<li><p>List and kill processes</p>

<p> ps: ps or ps aux|grep firefox</p>

<p> kill: kill + PID</p></li>
<li><p>Zip and upzip</p>

<p> zip a file:
 <code>
 zip report.zip report.doc
</code>
 zip a folder:
 <code>
 zip -r reports.zip reports
</code>
 upzip a zip:
 <code>
 upzip archive.zip
</code>
 list files in zip:
 <code>
 upzip -l archive.zip
</code></p></li>
<li><p>Redirection</p>

<p> &ldquo;>&rdquo;: redirect to file</p>

<p> &ldquo;>>&rdquo;: redirect to the bottom of file</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls &gt; listing.txt
</span><span class='line'>ls &gt;&gt; listing.txt</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>Piping</p>

<p> pass the output of one command to another</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls|grep report.doc</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use of IEEE Conference LaTex Template With .bib File]]></title>
    <link href="http://rdu.im/blog/2014/01/20/use-of-ieee-conference-latex-template-with-bib-file/"/>
    <updated>2014-01-20T18:05:23-05:00</updated>
    <id>http://rdu.im/blog/2014/01/20/use-of-ieee-conference-latex-template-with-bib-file</id>
    <content type="html"><![CDATA[<p>Recently I need to use the IEEE LaTex template (from <a href="http://www.ieee.org/conferences_events/conferences/publishing/templates.html">http://www.ieee.org/conferences_events/conferences/publishing/templates.html</a>) for a conference paper. This template doesn&rsquo;t use a .bib file for the management of references unless you make some modifictions. In my first try to use it, I got this error during compiling:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Something's wrong--perhaps a missing \item. \end{thebibliography}</span></code></pre></td></tr></table></div></figure>


<p> <!-- more -->
I googled this issue and tried different solutions. Finally I figured it out how to fix this error (thanks to Velin&rsquo;s help). The following are the steps to make a successful compilation.</p>

<ol>
<li>Download both  <em>LaTeX Archive Contents</em> and <em>LaTeX (Bibliography Files)</em></li>
<li>Extract both packages to the same folder</li>
<li>Uncomment the line:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\usepackage{cite}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Uncomment the lines:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\bibliographystyle{IEEEtran}
</span><span class='line'>\bibliography{IEEEabrv,../bib/paper}</span></code></pre></td></tr></table></div></figure>


<p>specify the name and location of your .bib file. For example, change the second line above to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\bibliography{IEEEexample}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Comment the lines:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\begin{thebibliography}{1}
</span><span class='line'>\bibitem{IEEEhowto:kopka}
</span><span class='line'>H.~Kopka and P.~W. Daly, \emph{A Guide to \LaTeX}, 3rd~ed.\hskip 1em plus
</span><span class='line'>0.5em minus 0.4em\relax Harlow, England: Addison-Wesley, 1999.
</span><span class='line'>\end{thebibliography}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Cite at least one item in the paper. For example, add</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\cite{IEEEexample:article_typical} </span></code></pre></td></tr></table></div></figure>


<p>at the end of the acknowledgement section.</p>

<ol>
<li>Compile the tex file and you should get no error.</li>
</ol>


<p><em>PS</em>: If you have got the error before you try the steps stated above, you should clean the files generated from the unsuccessfuly compilation. Otherwise you will get the same error even if you have made all modifications.</p>

<p>You can also download the successfully compiled template from here: <a href="http://sdrv.ms/17ynR0g">http://sdrv.ms/17ynR0g</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for the Use of Octopress]]></title>
    <link href="http://rdu.im/blog/2014/01/20/tips-for-the-use-of-octopress/"/>
    <updated>2014-01-20T15:36:18-05:00</updated>
    <id>http://rdu.im/blog/2014/01/20/tips-for-the-use-of-octopress</id>
    <content type="html"><![CDATA[<p>In the past two days, I transferred my blog from several other places to Github Pages with Octopress. Since I&rsquo;m a stranger to web development, I felt rather lost at the very beginning. But after you finish it, you will find it&rsquo;s not that difficult, at least not so hard to get a less customized Octopress-based blog. There are many good tutorials on the Internet so I see no point to write a new one. In this post, I mainly gather some resources I feel useful to finish the work.</p>

<h2>Setup</h2>

<h4>Follow <a href="http://octopress.org/docs/setup/">official tutorial</a> to finish installation</h4>

<ul>
<li>Install GIt</li>
<li>Install Ruby</li>
<li>Clone Octopress repository from Github</li>
<li>Install Dependencies</li>
</ul>


<p> <!-- more --></p>

<h4>Deploy blog to Github</h4>

<ul>
<li>Set up github pages: <a href="http://pages.github.com/">http://pages.github.com/</a></li>
<li>Deploy to github repository: <a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></li>
</ul>


<h4>Set up a personal domain</h4>

<ul>
<li>Register a domain from a domain registrar (for example: <a href="https://www.namecheap.com/">namecheap</a>)</li>
<li><a href="http://davidensinger.com/2013/03/setting-the-dns-for-github-pages-on-namecheap/">Setting the DNS for Github Pages on Namecheap</a></li>
</ul>


<h4>Set up Octopress on multiple computers</h4>

<ul>
<li><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone your Octopress to Blog from Two Places</a></li>
<li><a href="http://yhagio.github.io/blog/2013/04/09/how-to-start-octopress-blog-from-multiple-computers/">How to Start Octopress Blog From Multiple Computers</a></li>
<li><em>Always Remember To Pull From Remote Before Your Start Workong On One Computer To Avoid Push Conflicts</em></li>
</ul>


<h2>Customization</h2>

<ul>
<li>Official documents are good materials to start: <a href="http://octopress.org/docs/theme/template/">template</a>, <a href="http://octopress.org/docs/theme/styles/">styles</a></li>
<li>Available themes: <a href="opthemes.com">Opthemes</a>, <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">list by imathis</a></li>
<li>Third party plugins <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">list by imathis</a></li>
<li>Useful blogs/articles:

<ul>
<li><a href="http://octopressthemes.com/blog/">The OctopressThemes Blog</a></li>
<li><a href="http://blog.bigdinosaur.org/changing-octopresss-header/">Changing Octopress&rsquo;s Header</a></li>
<li><a href="http://aijazansari.com/2012/08/27/how-to-customize-octopress-theme/">How to Customize Your Octopress Theme</a></li>
<li><a href="http://time.to.pullthepl.ug/blog/2012/8/20/octopress-top-categories-plugin/">Octopress Top Categories Plugin</a></li>
</ul>
</li>
</ul>


<h2>Write Blog Posts</h2>

<h4>Useful Resources:</h4>

<ul>
<li><a href="https://help.github.com/articles/github-flavored-markdown">GitHub Flavored Markdown</a></li>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown Cheatsheet</a></li>
<li>Markdown Editor: <a href="http://pad.haroopress.com/user.html">Haroopad</a></li>
<li>Official Document about <a href="http://octopress.org/docs/blogging/plugins/">blog with plugins</a></li>
</ul>


<h4>Basic Commands:</h4>

<p>Create a new blog post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["title"]</span></code></pre></td></tr></table></div></figure>


<p>Create a new page:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page["title"]</span></code></pre></td></tr></table></div></figure>


<p>Generate blog:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>Preview blog:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>Deploy blog to remote github repository (<em>master branch</em>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>Push source folder to remote github repository (<em>source branch</em>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Blog]]></title>
    <link href="http://rdu.im/blog/2014/01/19/first-blog/"/>
    <updated>2014-01-19T14:48:01-05:00</updated>
    <id>http://rdu.im/blog/2014/01/19/first-blog</id>
    <content type="html"><![CDATA[<p>This is the first blog for testing purpose.</p>
]]></content>
  </entry>
  
</feed>
